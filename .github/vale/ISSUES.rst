===============================================
Known or possible issues with (our use of) vale
===============================================

.. contents::

Changes for us
==============

These are ideas for things we might want to do in this repository.

Duplicate dictionary entries
----------------------------

I wrote a little script (``~/sw/vale-work/check_dict_words.py`` on Tibs' machine) to detect duplicate words (those that occur in both identically in the default and aiven dictionaries, ignoring any ``/`` annotation).

It has hard-code file paths, but is probably worth productionising at some point (on the other hand, it is *very* simple).

Running that reports:

  Duplicate words are: API, Apache, Cassandra, Elasticsearch, GitHub, Homebrew, Java, Kafka, Kubernetes, MySQL, PostgreSQL, Prometheus, Python, Redis, boot, business, connect, go, hobbyist, operator, spring

So we should consider (a) removing the duplicates, and, perhaps, (b) rechecking this every so often.

Maybe have a new dictionary for product names
---------------------------------------------

We've introduced the new ``aiven.dic`` dictionary, but there are quite a few product names in there.

It might be worth splitting them out into a new ``products.dic`` dictionary. This will make them easier to curate.

There may be other such mini-dictionaries that we want to create as well.

Aiven for Apache XXX independent of Apache XXX
----------------------------------------------

I think that given a passage like:

  Something something something Apache XXX® something something Aiven for Apache XXX®.

it is probably "good form" to put the ``®`` on the "bare" and the "Aiven for" forms. This helps to make it clear that the "Aiven for" form is not special. It would be nice if we could make a rule (or rules) that treated this as a separate thing to check (at the moment our rule is only checking for the "Aiven XXX" case without taking into consideration if it is preceded by "Aiven for" or not.)

Dealing with links that contain code content
--------------------------------------------

Consider::

  `jq <https://stedolan.github.io/jq/>`_

We *really* want to put ``jq`` in "code" font, but we also want it as the word in the link.

Unfortunately, reStructuredText does not support::

  ```jq`` <https://stedolan.github.io/jq/>`_

and historical attempts to change reStructuredText / docutils to handle nested inline markup have never got very far.

We could probably come up with some use of replacements (as we do for various icons - see the end of our sphinx `conf.py <../../conf.py>`_ file), but that needs a lot of Sphinx/reStructuredText knowledge, and would need a separate replacement defining for each such link. It also doesn't work if we ever want literal and non-literal text in the same link text.

I did look at the ``SkippedScope`` directive (https://docs.errata.ai/vale/config#skippedscopes) in the ``.vale.ini`` file, which can be used to say what HTML block-level tags to ignore.

I considered adding ``a`` (corresponding to links - remember that vale checks the HTML generated by ``rst2html.py``), except that sometimes we *do* need checking inside links - for instance if there is a ``PostgreSQL®`` in the link text::

  `PostgreSQL® Project website <https://www.postgresql.org/>`_

...except that sometimes we do want to check the link text, for instance::


Other marks and checks
----------------------

We reference Elasticsearch a few times, and that needs a disclaimer/attribution, which I've supplied by hand as necessary. I am not sure if it is worth constructing a specific rule for this (and my first attempt didn't work!).

Possible rule for other cases that only happen occasionally:

* ``Apache Lucene™`` (which is a trademark of the Apache Software Foundation) in `<../../docs/products/opensearch/index.rst>`_ and `<../docs/products/opensearch/dashboards/getting-started.rst>`_. I've added a specific attribution in `PR 605`_.

* ``Apache ZooKeeper`` in `<../../docs/products/kafka/concepts/auth-types.rst>`_ and `<../docs/products/kafka/howto/use-zookeeper.rst>`_. This is actually an unregistered trademark (™) of Apache. I've made it refer to "Apache ZooKeeper" rather than "ZooKeeper", and added attribution in both places in `PR 605`_.

* Various names in `<../../docs/products/kafka/kafka-connect/concepts/list-of-connector-plugins.rst>`_, which may or may not need ® marks and/or attributions. I've made some attempt for some things in that file in `PR 605`_.

I would quite like rules to:

* generalise that ``Apache® XXX`` is wrong when it should be ``Apache XXX®``
* check for ``Apache®`` when ``Apache`` is *not* followed by a product name

In both cases, this *may* require listing all the product names in a regular expression, or may just mean checking for ``Apache <capitalised-word>``, which is probably good enough as a first pass.

**Also** there should be a periodic check of the rules against the current documentation within Aiven, since our understanding of how to handle registered and trademark marks can change over time.

.. _`PR 605`: https://github.com/aiven/devportal/pull/605

``raw`` mode checks - checking the markup
-----------------------------------------

These all probably need ``raw`` mode, to see the actual markup, which I haven't used yet.

* check for getting the wrong number of trailing underlines at the end of inline links wrong (it's very easy to get wrong)
* check for markdown style links (it's so easy to use markdown link style by mistake)
* check for missing ``:alt:`` in ``.. image::`` directives (at the moment we're relying on a vale bug to spot these - I'm looking into that elsewhere)
* check for single backticks (as for markdown) where there shoud be double backticks (single backticks in reStructuredText means "use the default role", which in our sphinx setup gives italics, which is a bit confusing and actually quite easy to miss)
* check for missing ``:language:`` on ``.. literalinclude::``, and for missing language name after ``.. code::`` and its variants



Changes for vale
================

These are ideas for thing we might want changing in vale itself.

``conditional`` rules are not ordered
-------------------------------------

**Comment:**  *May be a bug of just a feature request, report later.*

That is, a ``conditional`` rule asserts that if there is an occurrence of (text matching) ``first``, then there must also be at least one occurrence of (text matching) ``second``, which contains the string found by ``first``.

  **NOTE** see `Checking ® marks and other things <README.rst#checking-marks-and-other-things>`_ for an explanation of how ``conditional`` actually works.

The example given in the documentation (for ``WHO`` and its expansion/explanation) implies that ``second`` might be expected to come first, but this is not actually required by the code.

When I've got vale working as we wish, I expect to raise an issue asking that it be possible to request that ordering, since we want to be able to require ``Term®`` comes before ``Term``.

More documentation (and examples) needed for ``conditional``
------------------------------------------------------------

**Comment:**  *Vale documentation - up to us to propose*

It turns out this is quite hard to think about! And getting the regular expressions right for non-trivial cases (like registered cases, and *especially* the Redis case) is also non-trivial.

  **NOTE** see `Checking ® marks and other things <README.rst#checking-marks-and-other-things>`_ for an explanation of how ``conditional`` actually works.

Missing documentation for dictionary ``append``
-----------------------------------------------

**Comment:**  *Worth doing a PR for.*

There is no documentation for the ``append`` option of the ``spelling`` style.

It's quite an important option, as setting it ``true`` allows appending a dictionary to the default, rather than replacing it.

Documentation for ``capitalization`` needs extending
----------------------------------------------------

**Comment:**  *Worth doing a PR for. And definitely blogging about.*

As I discuss in `Capitalised headings <README.rst#capitalised-headings>`_, the capitalization style (and particularly the ``$sentence`` "match") doesn't work quite as one might expect. What it does is reasonable, but could do with explaining, as it can lead to surprises for very short titles.

No error for a file that doesn't exist
--------------------------------------

**Comment:**    *This doesn't affect our real world use of vale, and may not be either fixable or worth fixing.*

If I do ``vale <file-that-does-not-exist>`` I get no errors, and a status code of 0.

Given vale is meant to be used over a directory structure, I'm not sure this is something that will get "fixed".

No error for broken reStructuredText
------------------------------------

**Comment:**    *I'd rather like a fix for this. A quick look at the code suggests a PR might not be too hard.*

When there are syntax errors in reStructuredText, it seems that the file gets ignored. This looks just the same as having no vale errors in the file.

Vale checks reStructuredText by first running it through ``rst2html.py``. A quick check suggests that if I do ``rst2html.py <name>.rst > <name>.html``, I still get status code ``0`` if there is an error, but I also get error text written to ``stderr``. So it should, in principle, be possible to tell if something went wrong. (vale probably doesn't want to report the errors as such.)

Note: the source code appears to be fairly obviously just ignoring ``stderr``. It's possible that fixing this might be fairly simple, *except* that Windows also needs supporting, and I don't know how it handles ``stderr``.

The order of error output does not appear to be deterministic
-------------------------------------------------------------

**Comment:**    *This makes it harder to test things, for instance using shelltester*

For instance, if I run ``vale --output=line .vale/tests/bad.rst``, the order of the lines output is not consistent.

**Note:** check exactly what the ``--sort`` switch does.

Oddity in substitution matching
-------------------------------

**Comment:**  *Not sure what is going on here - might still be a "me" mistake rather than vale*

Looking at the lines in ``.vale/tests/bad.rst``::

  ``literal-text`` MirrorMaker2             -- this is NOT found

  ``literal text`` MirrorMaker2             -- this IS found

the first is not reported as an error, but the second is. If I put some "obvious" debugging into ``vale/internal/check/substitution.go``, it does indeed seem to "see" one and not the other.

I'm not 100% sure this is a vale bug yet, because in trying to say what I want to do for ``MirrorMaker2`` I might be being over-clever.

I'm recording it here because I don't want to investigate further at the moment (I'm currently running my patched vale over the documentation to try to fix all the problems it *does* find). Having a minimal provoking test case means I can come back to this and not forget it.

**NOTE to self** Remember to ``rg -wi MirrorMaker2`` after I've done all the other documentation fixes.

Sentence case and headings
--------------------------

**Comment:**  *A wish. An idea.*

For short titles, the sentence case "80%" rule doesn't work very well. Is there a better algorithm for working out whether the sentence casing is accceptable or not? (this might need to be given a different name). Because adding lots of exceptions is a pain (and feels the wrong solution).

It occurs to me that one possibility is to add a switch to the ``capitalization`` style to say "allow capitalised words from the dictionary to count towards the total". So ``Gantt`` would count.

Thoughts:

1. It depends on being able to easily look up whether a word is capitalised in the dictionary or dictionaries.
2. It should allow Capitalised (and thus also MixedCase) words.
3. Should it allow things like ``iPod`` - maybe that's ``another* shade of the option (I think the existing rules would regard ``iPod`` as not a "counting" word, but need to check)
4. This is meant to apply to ``$sentence`` - does it have any relevance for the other modes? And if not, should an error message be produced if it is specified for other modes?

Finding the vale CONTRIBUTING document
--------------------------------------

**Comment:**  *Should be a simple PR.*

It lives in ``.github``. Where I wasn't looking.

I think that there should either be a reference to it in the README (probably the best option), or it should be moved to the top level (which is where I'd expect it, but that doesn't make that the right choice).

Github's `Setting guidleines for repository contributors <https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors>`_ seems to indicate that it doesn't matter whether the CONTRIBUTING guide is at the top level or in ``.github`` - in either case it should get shown when someone does a PR (as it was to me).

Pedanting the vale CONTRIBUTING document
----------------------------------------

**Comment:**  *Make a PR.*

Note that in particular ``make lint`` doesn't do anything any more, as there's no such target.

(so either fix the Makefile, or suggest use of ``gofmt``)

The document says running the tests needs cucumber, ascidoctor and sphinx, but I've found they also need dita-ot and xsltproc (double check that last - I think it's needed, but I already had it installed).

Vale on/off problem with rst2html.py
------------------------------------

**Comment:**  *A wish. Might need a fix in rst2html.py*

The ability to use comments to switch vale off and on again looks very valuable, although in reStructuredText it is of less utility than one might wish because of how comments work (they sort-of work like paragraphs).

However, the expected workaround of marking up::

  .. vale off

  this text should be fine
  ------------------------

  .. vale on

is known not to work, as reported in `issue 340`_ (Vale on/off comments do not work on titles in RST) and may be either impossible or very difficult to fix - in fact, it's apparently a bug in rst2html.py.

.. _`issue 340`: https://github.com/errata-ai/vale/issues/340

*Although* it's not clear if we ever *want* to use this ourselves - it's a slippery slope disabling checking on parts of a document...

Vale on/off inline
------------------

**Comment:**  *Experimentation*

There already is support for ``.. vale off`` and ``.. vale on``, but these can only wrap blocks (and don't work around titles).

Would it be possible to use ``.. raw:: html`` and ``|substitution|`` to provide inline such? So one could write something like ``|vale-off|some text|vale-on|``?

As the reStructuredText documentation on `<Substitution definitions <https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#substitution-definitions>`_ says

  "Substitution definitions allow the power and flexibility of block-level directives to be shared by inline text. They are a way to include arbitrarily complex inline structures within text, while keeping the details out of the flow of text."

Maybe something like::

  .. |vale-on| raw:: html

     <!-- vale on -->

or::

  .. |vale-on| :raw-html:`<!-- vale on -->`

If this works, it may solve some of our other issues without any hacking of vale itself, and without complicated setup in the styles/rules (and it would be a work-around for `Vale on/off problem with rst2html.py`_, and probably worth mentioning in `issue 340`_.

It may also be possible to define the substitutions in the sphinx ``conf.py``, so it's always there.

And lastly, if this does work, it's worth blogging about...

*Although* it's not clear if we ever *want* to use this ourselves - it's a slippery slope disabling checking on parts of a document...
