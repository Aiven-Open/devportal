Pagila – a PostgreSQL sample database
=====================================

Aiven provides a sample database you can import in your Aiven for PostgreSQL service through the web console. Here, we will explore everything you need to know about the database and the procedure to get it up and running.

Pagila is a port of the `Sakila Sample Database <https://dev.mysql.com/doc/sakila/en/>`_. It was originally developed by Mark Hillyer – a former member of the MySQL AB documentation team – to provide a standard schema and data for articles, tutorials, books etc. Over time, it has been ported by the various developers to `multiple database systems <https://github.com/search?q=sakila>`_. We are currently using the version 2.1.0 provided by `devrimgunduz <https://github.com/devrimgunduz/pagila>`_.

Sakila (and thus, Pagila) is a database representing a DVD rental store (remember those?!), containing information about films (like title, category, actresses), rental stores (like address, staff members, customers) and rentals, where a customer rentals a film from a store through its staff.

With all these relational information, Pagila is a perfect fit to play around with PostgreSQL and the SQL language.

Load Pagila on PostgreSQL
-------------------------

Before exploring Pagila's database, we need a PostgreSQL server to load the data on. A quick and easy way to get a server is through `Aiven for PostgreSQL <https://aiven.io/postgresql>`_. If don't have an Aiven account yet, `sign up <https://console.aiven.io/signup?utm_source=github&amp;utm_medium=organic&amp;utm_campaign=devportal&amp;utm_content=repo>`_ and enjoy our free trial!

After logging in the Aiven Console, chose the PostgreSQL version, select the cloud and plan of your choice, give the service a name and hit the "Create Service" button. In a couple of minutes, you will have a PostgreSQL server up and running.

.. image:: /images/products/postgresql/pg-connection-details.png
    :alt: PostgreSQL service overview tab in Aiven's console

Now, we will load the Pagila database into our new service.

1. Download the ``pagila-data.sql`` from our `GitHub repository <https://github.com/aiven/devportal/blob/paglia-sample-database/code/products/postgresql/pagila/pagila-data.sql>`_.

.. Tip::
    You may use the following command on your terminal:

    $ wget https://raw.githubusercontent.com/aiven/devportal/paglia-sample-database/code/products/postgresql/pagila/pagila-data.sql

2. Connect to the PostgreSQL instance using the command below. The ``SERVICE_URI`` value can be found in the Aiven Console dashboard.

.. code:: shell

   psql 'SERVICE_URI'

3. Within the ``psql`` shell, create a database named ``pagila`` and connect to it with the command below:

.. code:: sql

    CREATE DATABASE pagila;
    \c pagila;

4. Populate the database with the following below. This might take some time, so grab a beverage of your choice ;)

.. code:: sql

    \i pagila-data.sql

5. You are ready to go! You can use the `Sample queries` section below to explore the database. Have fun!

Entity-relationship model diagram
---------------------------------

The image below shows an overview of the Pagila database tables and views, generated by `DBeaver <https://dbeaver.io>`_.

.. image:: /images/products/postgresql/pagila-erm.png
    :scale: 50%
    :alt: A entity-relation model diagram for the Pagila databases, containing all the tables, fields and views.

Sample queries
--------------

Let's explore the dataset with a few queries. All the queries results were limited by the first 10 items. 

1. List all the films by ordered by their length:

.. code:: sql

    select
        film_id,
        title,
        length
    from
        film
    order by
        length desc;

.. code::

    |film_id|title             |length|
    |-------|------------------|------|
    |426    |HOME PITY         |185   |
    |690    |POND SEATTLE      |185   |
    |609    |MUSCLE BRIGHT     |185   |
    |991    |WORST BANGER      |185   |
    |182    |CONTROL ANTHEM    |185   |
    |141    |CHICAGO NORTH     |185   |
    |349    |GANGS PRIDE       |185   |
    |212    |DARN FORRESTER    |185   |
    |817    |SOLDIERS EVOLUTION|185   |
    |872    |SWEET BROTHERHOOD |185   |
    
    
2. List how many films there are in each film category:

.. code:: sql

    select
        category.name,
        count(category.name) category_count
    from
        category
    left join film_category on
        category.category_id = film_category.category_id
    left join film on
        film_category.film_id = film.film_id
    group by
        category.name
    order by
        category_count desc;

.. code::

    |name       |category_count|
    |-----------|--------------|
    |Sports     |74            |
    |Foreign    |73            |
    |Family     |69            |
    |Documentary|68            |
    |Animation  |66            |
    |Action     |64            |
    |New        |63            |
    |Drama      |62            |
    |Sci-Fi     |61            |
    |Games      |61            |
    

3. Show the actors and actresses ordered by how many movies they are featured in:

.. code:: sql

    select
        actor.first_name,
        actor.last_name,
        count(actor.first_name) featured_count
    from
        actor
    left join film_actor on
        actor.actor_id = film_actor.actor_id
    group by
        actor.first_name,
        actor.last_name
    order by
        featured_count desc;

.. code::

    |first_name|last_name|featured_count|
    |----------|---------|--------------|
    |SUSAN     |DAVIS    |54            |
    |GINA      |DEGENERES|42            |
    |WALTER    |TORN     |41            |
    |MARY      |KEITEL   |40            |
    |MATTHEW   |CARREY   |39            |
    |SANDRA    |KILMER   |37            |
    |SCARLETT  |DAMON    |36            |
    |VIVIEN    |BASINGER |35            |
    |VAL       |BOLGER   |35            |
    |GROUCHO   |DUNST    |35            |


4. We can quickly get a list of all active customers ordered by their first name:

.. code:: sql

    select
        first_name,
        last_name
    from
        customer
    where
        active = 1
    order by first_name asc;

.. code::

    |first_name|last_name|
    |----------|---------|
    |MARY      |SMITH    |
    |PATRICIA  |JOHNSON  |
    |LINDA     |WILLIAMS |
    |BARBARA   |JONES    |
    |ELIZABETH |BROWN    |
    |JENNIFER  |DAVIS    |
    |MARIA     |MILLER   |
    |SUSAN     |WILSON   |
    |MARGARET  |MOORE    |
    |DOROTHY   |TAYLOR   |

5. Now, let's see who rented most DVDs – and how many times:

.. code:: sql

    select
        customer.first_name,
        customer.last_name,
        count(customer.first_name) rentals_count 
    from
        customer
    left join rental on
        customer.customer_id = rental.customer_id
    group by 
        customer.first_name,
        customer.last_name
    order by rentals_count desc;

.. code::

    |first_name|last_name|rentals_count|
    |----------|---------|-------------|
    |ELEANOR   |HUNT     |46           |
    |KARL      |SEAL     |45           |
    |CLARA     |SHAW     |42           |
    |MARCIA    |DEAN     |42           |
    |TAMMY     |SANDERS  |41           |
    |WESLEY    |BULL     |40           |
    |SUE       |PETERS   |40           |
    |MARION    |SNYDER   |39           |
    |RHONDA    |KENNEDY  |39           |
    |TIM       |CARY     |39           |


Ready for a challenge?
----------------------
After playing around with the sample queries, can you use SQL statements to answer some these questions?

1. What is the total revenue of each rental store?
2. Can you list the top 5 film genres by their gross revenue?
3. The `film.description` has the `text` type, allowing for `full text search <https://www.postgresql.org/docs/11/textsearch-intro.html>`_ queries, can you come up with an interesting SQL exploring this field?

Source
------
You can find the source code for the Pagila database and schema `here <https://github.com/aiven/devportal/tree/paglia-sample-database/code/products/postgresql/pagila>`_.

License
-------
The Sakila schema and data are licensed under the `New BSD License <http://www.opensource.org/licenses/bsd-license.php>`_, as informed `here <https://dev.mysql.com/doc/sakila/en/sakila-license.html>`_.

The Pagila schema and data are licensed under the `PostgreSQL License <https://opensource.org/licenses/postgresql>`_, as informed `here <https://github.com/devrimgunduz/pagila/blob/master/LICENSE.txt>`_.